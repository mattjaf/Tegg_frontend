{
  "address": "0xb4dc750a935A4dc0C5D0d1429C010aadBACfb8C2",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "HatchedTime",
          "type": "uint256"
        }
      ],
      "name": "HatchedEggNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "HatchTime",
          "type": "uint256"
        }
      ],
      "name": "LaidEggNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "HatchTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ResetTimer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_svgEggRaw",
          "type": "string"
        }
      ],
      "name": "addEggSVG",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_svgEggURI",
          "type": "string"
        }
      ],
      "name": "addEggURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_svgHatchRaw",
          "type": "string"
        }
      ],
      "name": "addHatchSVG",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_svgHatchURI",
          "type": "string"
        }
      ],
      "name": "addHatchURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allTokenArray",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allTokenTokenURIs",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "bless",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "create",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eggImageURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "hatchEgg",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hatchFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hatchTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        }
      ],
      "name": "ownerOfTokenIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        }
      ],
      "name": "ownerOfTokenURIs",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setHatchFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "svg",
          "type": "string"
        }
      ],
      "name": "svgToImageURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenIdToHatchTimer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1bc5d67c3b7448d802701e1fc83118d09170f9dc62c60ae4357e724ee493b2d1",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0xFc73F357Fb770845063dD42104A6F167fF3aE433",
    "contractAddress": "0xb4dc750a935A4dc0C5D0d1429C010aadBACfb8C2",
    "transactionIndex": 1,
    "gasUsed": "5429716",
    "logsBloom": "0x
    "blockHash": "0x3ef553d19b383de3a18b38452890693ebc43552d1a8e441638d7363a60d676a9",
    "transactionHash": "0x1bc5d67c3b7448d802701e1fc83118d09170f9dc62c60ae4357e724ee493b2d1",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 15228939,
        "transactionHash": "0x1bc5d67c3b7448d802701e1fc83118d09170f9dc62c60ae4357e724ee493b2d1",
        "address": "0xb4dc750a935A4dc0C5D0d1429C010aadBACfb8C2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fc73f357fb770845063dd42104a6f167ff3ae433"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x3ef553d19b383de3a18b38452890693ebc43552d1a8e441638d7363a60d676a9"
      }
    ],
    "blockNumber": 15228939,
    "cumulativeGasUsed": "5429716",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "d98908509ddfb8ea9f1f6663707290c8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"HatchedTime\",\"type\":\"uint256\"}],\"name\":\"HatchedEggNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"HatchTime\",\"type\":\"uint256\"}],\"name\":\"LaidEggNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HatchTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ResetTimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_svgEggRaw\",\"type\":\"string\"}],\"name\":\"addEggSVG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_svgEggURI\",\"type\":\"string\"}],\"name\":\"addEggURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_svgHatchRaw\",\"type\":\"string\"}],\"name\":\"addHatchSVG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_svgHatchURI\",\"type\":\"string\"}],\"name\":\"addHatchURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allTokenArray\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allTokenTokenURIs\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"bless\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eggImageURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"hatchEgg\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hatchFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hatchTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"ownerOfTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"ownerOfTokenURIs\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setHatchFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"name\":\"svgToImageURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToHatchTimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TeggNFTTheta.sol\":\"TeggNFTTheta\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/TeggNFTTheta.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n//\\r\\n// TNT-721 Non-Fungible Token implementation based on the OpenZeppelin Lib\\r\\n//\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool, uint256)\\r\\n    {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool, uint256)\\r\\n    {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool, uint256)\\r\\n    {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool, uint256)\\r\\n    {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool, uint256)\\r\\n    {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data)\\r\\n        internal\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance >= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\r\\n            data\\r\\n        );\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data)\\r\\n        internal\\r\\n        view\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        return\\r\\n            functionStaticCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level static call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data)\\r\\n        internal\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        return\\r\\n            functionDelegateCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level delegate call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary EnumerableSet {\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Set type with\\r\\n    // bytes32 values.\\r\\n    // The Set implementation uses private functions, and user-facing\\r\\n    // implementations (such as AddressSet) are just wrappers around the\\r\\n    // underlying Set.\\r\\n    // This means that we can only create new EnumerableSets for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct Set {\\r\\n        // Storage of set values\\r\\n        bytes32[] _values;\\r\\n        // Position of the value in the `values` array, plus 1 because index 0\\r\\n        // means a value is not in the set.\\r\\n        mapping(bytes32 => uint256) _indexes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\r\\n        if (!_contains(set, value)) {\\r\\n            set._values.push(value);\\r\\n            // The value is stored at length-1, but we add 1 to all indexes\\r\\n            // and use 0 as a sentinel value\\r\\n            set._indexes[value] = set._values.length;\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\r\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\r\\n        uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n        if (valueIndex != 0) {\\r\\n            // Equivalent to contains(set, value)\\r\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\r\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\r\\n            // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n            uint256 toDeleteIndex = valueIndex - 1;\\r\\n            uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n            if (lastIndex != toDeleteIndex) {\\r\\n                bytes32 lastvalue = set._values[lastIndex];\\r\\n\\r\\n                // Move the last value to the index where the value to delete is\\r\\n                set._values[toDeleteIndex] = lastvalue;\\r\\n                // Update the index for the moved value\\r\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\r\\n            }\\r\\n\\r\\n            // Delete the slot where the moved value was stored\\r\\n            set._values.pop();\\r\\n\\r\\n            // Delete the index for the deleted slot\\r\\n            delete set._indexes[value];\\r\\n\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function _contains(Set storage set, bytes32 value)\\r\\n        private\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return set._indexes[value] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function _length(Set storage set) private view returns (uint256) {\\r\\n        return set._values.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function _at(Set storage set, uint256 index)\\r\\n        private\\r\\n        view\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        return set._values[index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\r\\n        return set._values;\\r\\n    }\\r\\n\\r\\n    // Bytes32Set\\r\\n\\r\\n    struct Bytes32Set {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(Bytes32Set storage set, bytes32 value)\\r\\n        internal\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _add(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(Bytes32Set storage set, bytes32 value)\\r\\n        internal\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _remove(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(Bytes32Set storage set, bytes32 value)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _contains(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(Bytes32Set storage set, uint256 index)\\r\\n        internal\\r\\n        view\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        return _at(set._inner, index);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(Bytes32Set storage set)\\r\\n        internal\\r\\n        view\\r\\n        returns (bytes32[] memory)\\r\\n    {\\r\\n        return _values(set._inner);\\r\\n    }\\r\\n\\r\\n    // AddressSet\\r\\n\\r\\n    struct AddressSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(AddressSet storage set, address value)\\r\\n        internal\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(AddressSet storage set, address value)\\r\\n        internal\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(AddressSet storage set, address value)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(AddressSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(AddressSet storage set, uint256 index)\\r\\n        internal\\r\\n        view\\r\\n        returns (address)\\r\\n    {\\r\\n        return address(uint160(uint256(_at(set._inner, index))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(AddressSet storage set)\\r\\n        internal\\r\\n        view\\r\\n        returns (address[] memory)\\r\\n    {\\r\\n        bytes32[] memory store = _values(set._inner);\\r\\n        address[] memory result;\\r\\n\\r\\n        assembly {\\r\\n            result := store\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    // UintSet\\r\\n\\r\\n    struct UintSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(UintSet storage set, uint256 value)\\r\\n        internal\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _remove(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(UintSet storage set, uint256 value)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _contains(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function length(UintSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(UintSet storage set, uint256 index)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return uint256(_at(set._inner, index));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(UintSet storage set)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        bytes32[] memory store = _values(set._inner);\\r\\n        uint256[] memory result;\\r\\n\\r\\n        assembly {\\r\\n            result := store\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary EnumerableMap {\\r\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\r\\n\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Map type with\\r\\n    // bytes32 keys and values.\\r\\n    // The Map implementation uses private functions, and user-facing\\r\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\r\\n    // the underlying Map.\\r\\n    // This means that we can only create new EnumerableMaps for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct Map {\\r\\n        // Storage of keys\\r\\n        EnumerableSet.Bytes32Set _keys;\\r\\n        mapping(bytes32 => bytes32) _values;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\r\\n     * key. O(1).\\r\\n     *\\r\\n     * Returns true if the key was added to the map, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _set(\\r\\n        Map storage map,\\r\\n        bytes32 key,\\r\\n        bytes32 value\\r\\n    ) private returns (bool) {\\r\\n        map._values[key] = value;\\r\\n        return map._keys.add(key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a key-value pair from a map. O(1).\\r\\n     *\\r\\n     * Returns true if the key was removed from the map, that is if it was present.\\r\\n     */\\r\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\r\\n        delete map._values[key];\\r\\n        return map._keys.remove(key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the key is in the map. O(1).\\r\\n     */\\r\\n    function _contains(Map storage map, bytes32 key)\\r\\n        private\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return map._keys.contains(key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\r\\n     */\\r\\n    function _length(Map storage map) private view returns (uint256) {\\r\\n        return map._keys.length();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of entries inside the\\r\\n     * array, and it may change when more entries are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function _at(Map storage map, uint256 index)\\r\\n        private\\r\\n        view\\r\\n        returns (bytes32, bytes32)\\r\\n    {\\r\\n        bytes32 key = map._keys.at(index);\\r\\n        return (key, map._values[key]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\r\\n     * Does not revert if `key` is not in the map.\\r\\n     */\\r\\n    function _tryGet(Map storage map, bytes32 key)\\r\\n        private\\r\\n        view\\r\\n        returns (bool, bytes32)\\r\\n    {\\r\\n        bytes32 value = map._values[key];\\r\\n        if (value == bytes32(0)) {\\r\\n            return (_contains(map, key), bytes32(0));\\r\\n        } else {\\r\\n            return (true, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value associated with `key`.  O(1).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `key` must be in the map.\\r\\n     */\\r\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\r\\n        bytes32 value = map._values[key];\\r\\n        require(\\r\\n            value != 0 || _contains(map, key),\\r\\n            \\\"EnumerableMap: nonexistent key\\\"\\r\\n        );\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\r\\n     */\\r\\n    function _get(\\r\\n        Map storage map,\\r\\n        bytes32 key,\\r\\n        string memory errorMessage\\r\\n    ) private view returns (bytes32) {\\r\\n        bytes32 value = map._values[key];\\r\\n        require(value != 0 || _contains(map, key), errorMessage);\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    // UintToAddressMap\\r\\n\\r\\n    struct UintToAddressMap {\\r\\n        Map _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\r\\n     * key. O(1).\\r\\n     *\\r\\n     * Returns true if the key was added to the map, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function set(\\r\\n        UintToAddressMap storage map,\\r\\n        uint256 key,\\r\\n        address value\\r\\n    ) internal returns (bool) {\\r\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the key was removed from the map, that is if it was present.\\r\\n     */\\r\\n    function remove(UintToAddressMap storage map, uint256 key)\\r\\n        internal\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _remove(map._inner, bytes32(key));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the key is in the map. O(1).\\r\\n     */\\r\\n    function contains(UintToAddressMap storage map, uint256 key)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _contains(map._inner, bytes32(key));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of elements in the map. O(1).\\r\\n     */\\r\\n    function length(UintToAddressMap storage map)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _length(map._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(UintToAddressMap storage map, uint256 index)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256, address)\\r\\n    {\\r\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\r\\n        return (uint256(key), address(uint160(uint256(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\r\\n     * Does not revert if `key` is not in the map.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryGet(UintToAddressMap storage map, uint256 key)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool, address)\\r\\n    {\\r\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\r\\n        return (success, address(uint160(uint256(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value associated with `key`.  O(1).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `key` must be in the map.\\r\\n     */\\r\\n    function get(UintToAddressMap storage map, uint256 key)\\r\\n        internal\\r\\n        view\\r\\n        returns (address)\\r\\n    {\\r\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\r\\n     */\\r\\n    function get(\\r\\n        UintToAddressMap storage map,\\r\\n        uint256 key,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (address) {\\r\\n        return\\r\\n            address(\\r\\n                uint160(uint256(_get(map._inner, bytes32(key), errorMessage)))\\r\\n            );\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary Strings {\\r\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\r\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\r\\n        if (value == 0) {\\r\\n            return \\\"0x00\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 length = 0;\\r\\n        while (temp != 0) {\\r\\n            length++;\\r\\n            temp >>= 8;\\r\\n        }\\r\\n        return toHexString(value, length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n     */\\r\\n    function toHexString(uint256 value, uint256 length)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        bytes memory buffer = new bytes(2 * length + 2);\\r\\n        buffer[0] = \\\"0\\\";\\r\\n        buffer[1] = \\\"x\\\";\\r\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\r\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\r\\n            value >>= 4;\\r\\n        }\\r\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\r\\n        return string(buffer);\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface ITNT165 {\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\\r\\ninterface ITNT721 is ITNT165 {\\r\\n    event Transfer(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 indexed tokenId\\r\\n    );\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed approved,\\r\\n        uint256 indexed tokenId\\r\\n    );\\r\\n    event ApprovalForAll(\\r\\n        address indexed owner,\\r\\n        address indexed operator,\\r\\n        bool approved\\r\\n    );\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n    function getApproved(uint256 tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (address operator);\\r\\n\\r\\n    function setApprovalForAll(address operator, bool _approved) external;\\r\\n\\r\\n    function isApprovedForAll(address owner, address operator)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface ITNT721Metadata is ITNT721 {\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n}\\r\\n\\r\\ninterface ITNT721Enumerable is ITNT721 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 tokenId);\\r\\n\\r\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface ITNT721Receiver {\\r\\n    function onTNT721Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\\r\\ncontract TNT165 is ITNT165 {\\r\\n    bytes4 private constant _INTERFACE_ID_TNT165 = 0x01ffc9a7;\\r\\n\\r\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\r\\n\\r\\n    constructor() {\\r\\n        _registerInterface(_INTERFACE_ID_TNT165);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _supportedInterfaces[interfaceId];\\r\\n    }\\r\\n\\r\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\r\\n        require(interfaceId != 0xffffffff, \\\"TNT165: invalid interface id\\\");\\r\\n        _supportedInterfaces[interfaceId] = true;\\r\\n    }\\r\\n}\\r\\n\\r\\n// TNT stands for \\\"Theta Network Token\\\", TNT-721 is the non-fungible token\\r\\n// standard on the Theta network, similar to the ERC-721 standard on Ethereum\\r\\ncontract TNT721 is\\r\\n    Context,\\r\\n    TNT165,\\r\\n    ITNT721,\\r\\n    ITNT721Metadata,\\r\\n    ITNT721Enumerable\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n    using EnumerableSet for EnumerableSet.UintSet;\\r\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\r\\n    using Strings for uint256;\\r\\n    bytes4 private constant _TNT721_RECEIVED = 0x150b7a02;\\r\\n    mapping(address => EnumerableSet.UintSet) private _holderTokens;\\r\\n    EnumerableMap.UintToAddressMap private _tokenOwners;\\r\\n    mapping(uint256 => address) private _tokenApprovals;\\r\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    mapping(uint256 => string) private _tokenURIs;\\r\\n    string private _baseURI;\\r\\n    bytes4 private constant _INTERFACE_ID_TNT721 = 0x80ac58cd;\\r\\n    bytes4 private constant _INTERFACE_ID_TNT721_METADATA = 0x5b5e139f;\\r\\n    bytes4 private constant _INTERFACE_ID_TNT721_ENUMERABLE = 0x780e9d63;\\r\\n\\r\\n    constructor(string memory name, string memory symbol) public {\\r\\n        _name = name;\\r\\n        _symbol = symbol;\\r\\n        _registerInterface(_INTERFACE_ID_TNT721);\\r\\n        _registerInterface(_INTERFACE_ID_TNT721_METADATA);\\r\\n        _registerInterface(_INTERFACE_ID_TNT721_ENUMERABLE);\\r\\n    }\\r\\n\\r\\n    function balanceOf(address owner) public view override returns (uint256) {\\r\\n        require(\\r\\n            owner != address(0),\\r\\n            \\\"TNT721: balance query for the zero address\\\"\\r\\n        );\\r\\n\\r\\n        return _holderTokens[owner].length();\\r\\n    }\\r\\n\\r\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\r\\n        return\\r\\n            _tokenOwners.get(\\r\\n                tokenId,\\r\\n                \\\"TNT721: owner query for nonexistent token\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function name() public view override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    // added virtual\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"TNT721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        string memory _tokenURI = _tokenURIs[tokenId];\\r\\n\\r\\n        // If there is no base URI, return the token URI.\\r\\n        if (bytes(_baseURI).length == 0) {\\r\\n            return _tokenURI;\\r\\n        }\\r\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\r\\n        if (bytes(_tokenURI).length > 0) {\\r\\n            return string(abi.encodePacked(_baseURI, _tokenURI));\\r\\n        }\\r\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\r\\n        return string(abi.encodePacked(_baseURI, tokenId.toString()));\\r\\n    }\\r\\n\\r\\n    function baseURI() public view returns (string memory) {\\r\\n        return _baseURI;\\r\\n    }\\r\\n\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _holderTokens[owner].at(index);\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\\r\\n        return _tokenOwners.length();\\r\\n    }\\r\\n\\r\\n    function tokenByIndex(uint256 index)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        (uint256 tokenId, ) = _tokenOwners.at(index);\\r\\n        return tokenId;\\r\\n    }\\r\\n\\r\\n    function approve(address to, uint256 tokenId) public virtual override {\\r\\n        address owner = ownerOf(tokenId);\\r\\n        require(to != owner, \\\"TNT721: approval to current owner\\\");\\r\\n\\r\\n        require(\\r\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\r\\n            \\\"TNT721: approve caller is not owner nor approved for all\\\"\\r\\n        );\\r\\n\\r\\n        _approve(to, tokenId);\\r\\n    }\\r\\n\\r\\n    function getApproved(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (address)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"TNT721: approved query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    function setApprovalForAll(address operator, bool approved)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n    {\\r\\n        require(operator != _msgSender(), \\\"TNT721: approve to caller\\\");\\r\\n\\r\\n        _operatorApprovals[_msgSender()][operator] = approved;\\r\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\r\\n    }\\r\\n\\r\\n    function isApprovedForAll(address owner, address operator)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        //solhint-disable-next-line max-line-length\\r\\n        require(\\r\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\r\\n            \\\"TNT721: transfer caller is not owner nor approved\\\"\\r\\n        );\\r\\n\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) public virtual override {\\r\\n        require(\\r\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\r\\n            \\\"TNT721: transfer caller is not owner nor approved\\\"\\r\\n        );\\r\\n        _safeTransfer(from, to, tokenId, _data);\\r\\n    }\\r\\n\\r\\n    function _safeTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) internal virtual {\\r\\n        _transfer(from, to, tokenId);\\r\\n        require(\\r\\n            _checkOnTNT721Received(from, to, tokenId, _data),\\r\\n            \\\"TNT721: transfer to non TNT721Receiver implementer\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\r\\n        return _tokenOwners.contains(tokenId);\\r\\n    }\\r\\n\\r\\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"TNT721: operator query for nonexistent token\\\"\\r\\n        );\\r\\n        address owner = ownerOf(tokenId);\\r\\n        return (spender == owner ||\\r\\n            getApproved(tokenId) == spender ||\\r\\n            isApprovedForAll(owner, spender));\\r\\n    }\\r\\n\\r\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\r\\n        _safeMint(to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) internal virtual {\\r\\n        _mint(to, tokenId);\\r\\n        require(\\r\\n            _checkOnTNT721Received(address(0), to, tokenId, _data),\\r\\n            \\\"TNT721: transfer to non TNT721Receiver implementer\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _mint(address to, uint256 tokenId) internal virtual {\\r\\n        require(to != address(0), \\\"TNT721: mint to the zero address\\\");\\r\\n        require(!_exists(tokenId), \\\"TNT721: token already minted\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), to, tokenId);\\r\\n\\r\\n        _holderTokens[to].add(tokenId);\\r\\n\\r\\n        _tokenOwners.set(tokenId, to);\\r\\n\\r\\n        emit Transfer(address(0), to, tokenId);\\r\\n    }\\r\\n\\r\\n    function _burn(uint256 tokenId) internal virtual {\\r\\n        address owner = ownerOf(tokenId);\\r\\n\\r\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\r\\n\\r\\n        // Clear approvals\\r\\n        _approve(address(0), tokenId);\\r\\n\\r\\n        // Clear metadata (if any)\\r\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\r\\n            delete _tokenURIs[tokenId];\\r\\n        }\\r\\n\\r\\n        _holderTokens[owner].remove(tokenId);\\r\\n\\r\\n        _tokenOwners.remove(tokenId);\\r\\n\\r\\n        emit Transfer(owner, address(0), tokenId);\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {\\r\\n        require(\\r\\n            ownerOf(tokenId) == from,\\r\\n            \\\"TNT721: transfer of token that is not own\\\"\\r\\n        );\\r\\n        require(to != address(0), \\\"TNT721: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, tokenId);\\r\\n\\r\\n        // Clear approvals from the previous owner\\r\\n        _approve(address(0), tokenId);\\r\\n\\r\\n        _holderTokens[from].remove(tokenId);\\r\\n        _holderTokens[to].add(tokenId);\\r\\n\\r\\n        _tokenOwners.set(tokenId, to);\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI)\\r\\n        internal\\r\\n        virtual\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"TNT721Metadata: URI set of nonexistent token\\\"\\r\\n        );\\r\\n        _tokenURIs[tokenId] = _tokenURI;\\r\\n    }\\r\\n\\r\\n    function _setBaseURI(string memory baseURI_) internal virtual {\\r\\n        _baseURI = baseURI_;\\r\\n    }\\r\\n\\r\\n    function _checkOnTNT721Received(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) private returns (bool) {\\r\\n        if (!to.isContract()) {\\r\\n            return true;\\r\\n        }\\r\\n        bytes memory returndata = to.functionCall(\\r\\n            abi.encodeWithSelector(\\r\\n                ITNT721Receiver(to).onTNT721Received.selector,\\r\\n                _msgSender(),\\r\\n                from,\\r\\n                tokenId,\\r\\n                _data\\r\\n            ),\\r\\n            \\\"TNT721: transfer to non TNT721Receiver implementer\\\"\\r\\n        );\\r\\n        bytes4 retval = abi.decode(returndata, (bytes4));\\r\\n        return (retval == _TNT721_RECEIVED);\\r\\n    }\\r\\n\\r\\n    function _approve(address to, uint256 tokenId) private {\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n        emit Approval(ownerOf(tokenId), to, tokenId);\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _setOwner(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _setOwner(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _setOwner(newOwner);\\r\\n    }\\r\\n\\r\\n    function _setOwner(address newOwner) private {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary Base64 {\\r\\n    string internal constant TABLE =\\r\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length == 0) return \\\"\\\";\\r\\n\\r\\n        // load the table into memory\\r\\n        string memory table = TABLE;\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\r\\n\\r\\n        // add some extra buffer at the end required for the writing\\r\\n        string memory result = new string(encodedLen + 32);\\r\\n\\r\\n        assembly {\\r\\n            // set the actual output length\\r\\n            mstore(result, encodedLen)\\r\\n\\r\\n            // prepare the lookup table\\r\\n            let tablePtr := add(table, 1)\\r\\n\\r\\n            // input ptr\\r\\n            let dataPtr := data\\r\\n            let endPtr := add(dataPtr, mload(data))\\r\\n\\r\\n            // result ptr, jump over length\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            // run over the input, 3 bytes at a time\\r\\n            for {\\r\\n\\r\\n            } lt(dataPtr, endPtr) {\\r\\n\\r\\n            } {\\r\\n                dataPtr := add(dataPtr, 3)\\r\\n\\r\\n                // read 3 bytes\\r\\n                let input := mload(dataPtr)\\r\\n\\r\\n                // write 4 characters\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(input, 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n            }\\r\\n\\r\\n            // padding with '='\\r\\n            switch mod(mload(data), 3)\\r\\n            case 1 {\\r\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\r\\n            }\\r\\n            case 2 {\\r\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract TeggNFTTheta is TNT721, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    // using SafeMath32 for uint32;\\r\\n    // using SafeMath16 for uint16;\\r\\n\\r\\n    uint256 public hatchTime = 360 days;\\r\\n    uint256 public HatchTime;\\r\\n    uint256 public tokenCounter;\\r\\n    string public eggImageURI;\\r\\n    string private hatchImageURI;\\r\\n    uint256 public hatchFee = 10000000000000000000; // 10 tfuel?\\r\\n\\r\\n    mapping(uint256 => uint256) public tokenIdToHatchTimer;\\r\\n\\r\\n    event LaidEggNFT(uint256 indexed tokenId, uint256 indexed HatchTime);\\r\\n    // test\\r\\n    event HatchedEggNFT(uint256 indexed tokenId, uint256 indexed HatchedTime);\\r\\n\\r\\n    constructor() public TNT721(\\\"Theta Egg NFT\\\", \\\"TEGG\\\") {\\r\\n        tokenCounter = 0;\\r\\n    }\\r\\n\\r\\n    function addEggURI(string memory _svgEggURI) public onlyOwner {\\r\\n        eggImageURI = _svgEggURI;\\r\\n    }\\r\\n\\r\\n    function addHatchURI(string memory _svgHatchURI) public onlyOwner {\\r\\n        hatchImageURI = _svgHatchURI;\\r\\n    }\\r\\n\\r\\n    function addEggSVG(string memory _svgEggRaw) public onlyOwner {\\r\\n        string memory svgURI = svgToImageURI(_svgEggRaw);\\r\\n        addEggURI(svgURI);\\r\\n    }\\r\\n\\r\\n    function addHatchSVG(string memory _svgHatchRaw) public onlyOwner {\\r\\n        string memory svgURI = svgToImageURI(_svgHatchRaw);\\r\\n        addHatchURI(svgURI);\\r\\n    }\\r\\n\\r\\n    function withdraw() external onlyOwner {\\r\\n        address _owner = owner();\\r\\n        payable(_owner).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    function setHatchFee(uint256 _fee) external onlyOwner {\\r\\n        hatchFee = _fee;\\r\\n    }\\r\\n\\r\\n    // possibly delete for production version\\r\\n    function ResetTimer(uint256 tokenId) external onlyOwner {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n        tokenIdToHatchTimer[tokenId] = (block.timestamp + hatchTime);\\r\\n    }\\r\\n\\r\\n    // prevented double paying -- possibly edit for future evo in v2\\r\\n    function hatchEgg(uint256 tokenId) external payable {\\r\\n        require(\\r\\n            tokenIdToHatchTimer[tokenId] != (0),\\r\\n            \\\"You already hatched your egg\\\"\\r\\n        );\\r\\n        require(\\r\\n            block.timestamp <= tokenIdToHatchTimer[tokenId],\\r\\n            \\\"Your egg has already naturally hatched\\\"\\r\\n        );\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n        require(\\r\\n            msg.sender == ownerOf(tokenId),\\r\\n            \\\"Owner does not own this token\\\"\\r\\n        );\\r\\n        require(msg.value == hatchFee);\\r\\n        tokenIdToHatchTimer[tokenId] = (0);\\r\\n        emit HatchedEggNFT(tokenId, block.timestamp);\\r\\n    }\\r\\n\\r\\n    // might incorperate this function -- prossibly remove for production\\r\\n    function bless(uint256 tokenId) external onlyOwner {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n        tokenIdToHatchTimer[tokenId] = (0);\\r\\n        emit HatchedEggNFT(tokenId, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function create() public {\\r\\n        tokenIdToHatchTimer[tokenCounter] = (block.timestamp + hatchTime);\\r\\n        HatchTime = tokenIdToHatchTimer[tokenCounter];\\r\\n        emit LaidEggNFT(tokenCounter, HatchTime);\\r\\n        _safeMint(msg.sender, tokenCounter);\\r\\n        tokenCounter = tokenCounter + 1;\\r\\n    }\\r\\n\\r\\n    function getTokenCounter() public view returns (uint256) {\\r\\n        return tokenCounter;\\r\\n    }\\r\\n\\r\\n    // possibly a better way\\r\\n    function ownerOfTokenIds(address tokenOwner)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        uint256[] memory result = new uint256[](balanceOf(tokenOwner));\\r\\n        uint256 counter = 0;\\r\\n        for (uint256 i = 0; i < tokenCounter; i++) {\\r\\n            if (ownerOf(i) == tokenOwner) {\\r\\n                result[counter] = i;\\r\\n                counter++;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function ownerOfTokenURIs(address tokenOwner)\\r\\n        external\\r\\n        view\\r\\n        returns (string[] memory)\\r\\n    {\\r\\n        string[] memory result = new string[](balanceOf(tokenOwner));\\r\\n        uint256 counter = 0;\\r\\n        for (uint256 i = 0; i < tokenCounter; i++) {\\r\\n            if (ownerOf(i) == tokenOwner) {\\r\\n                result[counter] = tokenURI(i);\\r\\n                counter++;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function allTokenTokenURIs() external view returns (string[] memory) {\\r\\n        string[] memory result = new string[](tokenCounter);\\r\\n        for (uint256 i = 0; i < tokenCounter; i++) {\\r\\n            result[i] = tokenURI(i);\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function allTokenArray() external view returns (uint256[] memory) {\\r\\n        uint256[] memory result = new uint256[](tokenCounter);\\r\\n        for (uint256 i = 0; i < tokenCounter; i++) {\\r\\n            result[i] = i;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    // You could also just upload the raw SVG and have solildity convert it!\\r\\n    function svgToImageURI(string memory svg)\\r\\n        public\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        // example:\\r\\n        // '<svg width=\\\"500\\\" height=\\\"500\\\" viewBox=\\\"0 0 285 350\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path fill=\\\"black\\\" d=\\\"M150,0,L75,200,L225,200,Z\\\"></path></svg>'\\r\\n        // would return \\\"\\\"\\r\\n        string memory baseURL = \\\"data:image/svg+xml;base64,\\\";\\r\\n        string memory svgBase64Encoded = Base64.encode(\\r\\n            bytes(string(abi.encodePacked(svg)))\\r\\n        );\\r\\n        return string(abi.encodePacked(baseURL, svgBase64Encoded));\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n        string memory imageURI = eggImageURI;\\r\\n        if (block.timestamp >= tokenIdToHatchTimer[tokenId]) {\\r\\n            imageURI = hatchImageURI;\\r\\n        }\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    \\\"data:application/json;base64,\\\",\\r\\n                    Base64.encode(\\r\\n                        bytes(\\r\\n                            abi.encodePacked(\\r\\n                                '{\\\"name\\\":\\\"',\\r\\n                                \\\"Haching eggs NFT\\\", // You can add whatever name here\\r\\n                                '\\\", \\\"description\\\":\\\"An NFT that that hatches\\\", \\\"attributes\\\":\\\"\\\", \\\"image\\\":\\\"',\\r\\n                                imageURI,\\r\\n                                '\\\"}'\\r\\n                            )\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x798bd9902b102efe08584960b3eaf3bdaee15ced4d3d3eacd45767d5f9532cca\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106102515760003560e01c8063715018a611610139578063c15f5342116100b6578063d082e3811161007a578063d082e381146108db578063e985e9c514610906578063efc81a8c14610943578063f2fde38b1461095a578063f3d3418814610983578063fc537fd6146109ac57610251565b8063c15f5342146107e4578063c5925a5e1461080d578063c71d8bad14610836578063c87b56dd14610861578063ca8a7d5e1461089e57610251565b80639f0fff9e116100fd5780639f0fff9e14610715578063a22cb4651461073e578063a2836a2914610767578063a9ef0f5a14610790578063b88d4fde146107bb57610251565b8063715018a614610640578063752f20c2146106575780638631f9dd146106825780638da5cb5b146106bf57806395d89b41146106ea57610251565b806330d871c6116101d25780634f8c79f8116101965780634f8c79f81461051c57806354c629e3146105455780636352211e146105705780636c0360eb146105ad5780636e02007d146105d857806370a082311461060357610251565b806330d871c6146104375780633ccfd60b1461047457806342842e0e1461048b57806348eaff74146104b45780634f6ccce7146104df57610251565b806318160ddd1161021957806318160ddd1461034d5780631ca0fd78146103785780632385554c146103b557806323b872dd146103d15780632f745c59146103fa57610251565b806301ffc9a71461025657806306fdde03146102935780630780c414146102be578063081812fc146102e7578063095ea7b314610324575b600080fd5b34801561026257600080fd5b5061027d6004803603810190610278919061378e565b6109d7565b60405161028a919061446e565b60405180910390f35b34801561029f57600080fd5b506102a8610a3e565b6040516102b59190614489565b60405180910390f35b3480156102ca57600080fd5b506102e560048036038101906102e091906137e0565b610ad0565b005b3480156102f357600080fd5b5061030e60048036038101906103099190613821565b610b66565b60405161031b91906143c3565b60405180910390f35b34801561033057600080fd5b5061034b60048036038101906103469190613752565b610beb565b005b34801561035957600080fd5b50610362610d03565b60405161036f919061472b565b60405180910390f35b34801561038457600080fd5b5061039f600480360381019061039a91906135e7565b610d14565b6040516103ac919061442a565b60405180910390f35b6103cf60048036038101906103ca9190613821565b610e5a565b005b3480156103dd57600080fd5b506103f860048036038101906103f3919061364c565b61101d565b005b34801561040657600080fd5b50610421600480360381019061041c9190613752565b61107d565b60405161042e919061472b565b60405180910390f35b34801561044357600080fd5b5061045e600480360381019061045991906137e0565b6110d8565b60405161046b9190614489565b60405180910390f35b34801561048057600080fd5b5061048961116b565b005b34801561049757600080fd5b506104b260048036038101906104ad919061364c565b61123d565b005b3480156104c057600080fd5b506104c961125d565b6040516104d6919061472b565b60405180910390f35b3480156104eb57600080fd5b5061050660048036038101906105019190613821565b611263565b604051610513919061472b565b60405180910390f35b34801561052857600080fd5b50610543600480360381019061053e9190613821565b611286565b005b34801561055157600080fd5b5061055a61130c565b604051610567919061442a565b60405180910390f35b34801561057c57600080fd5b5061059760048036038101906105929190613821565b6113fd565b6040516105a491906143c3565b60405180910390f35b3480156105b957600080fd5b506105c2611434565b6040516105cf9190614489565b60405180910390f35b3480156105e457600080fd5b506105ed6114c6565b6040516105fa919061472b565b60405180910390f35b34801561060f57600080fd5b5061062a600480360381019061062591906135e7565b6114d0565b604051610637919061472b565b60405180910390f35b34801561064c57600080fd5b5061065561158f565b005b34801561066357600080fd5b5061066c611617565b604051610679919061444c565b60405180910390f35b34801561068e57600080fd5b506106a960048036038101906106a49190613821565b6116fc565b6040516106b6919061472b565b60405180910390f35b3480156106cb57600080fd5b506106d4611714565b6040516106e191906143c3565b60405180910390f35b3480156106f657600080fd5b506106ff61173e565b60405161070c9190614489565b60405180910390f35b34801561072157600080fd5b5061073c600480360381019061073791906137e0565b6117d0565b005b34801561074a57600080fd5b5061076560048036038101906107609190613716565b611866565b005b34801561077357600080fd5b5061078e600480360381019061078991906137e0565b6119e7565b005b34801561079c57600080fd5b506107a5611a7d565b6040516107b29190614489565b60405180910390f35b3480156107c757600080fd5b506107e260048036038101906107dd919061369b565b611b0b565b005b3480156107f057600080fd5b5061080b60048036038101906108069190613821565b611b6d565b005b34801561081957600080fd5b50610834600480360381019061082f91906137e0565b611c59565b005b34801561084257600080fd5b5061084b611cef565b604051610858919061472b565b60405180910390f35b34801561086d57600080fd5b5061088860048036038101906108839190613821565b611cf5565b6040516108959190614489565b60405180910390f35b3480156108aa57600080fd5b506108c560048036038101906108c091906135e7565b611ec5565b6040516108d2919061444c565b60405180910390f35b3480156108e757600080fd5b506108f0611fff565b6040516108fd919061472b565b60405180910390f35b34801561091257600080fd5b5061092d60048036038101906109289190613610565b612005565b60405161093a919061446e565b60405180910390f35b34801561094f57600080fd5b50610958612099565b005b34801561096657600080fd5b50610981600480360381019061097c91906135e7565b612131565b005b34801561098f57600080fd5b506109aa60048036038101906109a59190613821565b612229565b005b3480156109b857600080fd5b506109c1612337565b6040516109ce919061472b565b60405180910390f35b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b606060078054610a4d90614a73565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7990614a73565b8015610ac65780601f10610a9b57610100808354040283529160200191610ac6565b820191906000526020600020905b815481529060010190602001808311610aa957829003601f168201915b5050505050905090565b610ad861233d565b73ffffffffffffffffffffffffffffffffffffffff16610af6611714565b73ffffffffffffffffffffffffffffffffffffffff1614610b4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b43906145cb565b60405180910390fd5b8060109080519060200190610b6292919061340b565b5050565b6000610b7182612345565b610bb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba79061460b565b60405180910390fd5b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610bf6826113fd565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5e9061450b565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610c8661233d565b73ffffffffffffffffffffffffffffffffffffffff161480610cb55750610cb481610caf61233d565b612005565b5b610cf4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ceb9061456b565b60405180910390fd5b610cfe8383612362565b505050565b6000610d0f600261241b565b905090565b60606000610d21836114d0565b67ffffffffffffffff811115610d60577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610d9357816020015b6060815260200190600190039081610d7e5790505b5090506000805b600e54811015610e4f578473ffffffffffffffffffffffffffffffffffffffff16610dc4826113fd565b73ffffffffffffffffffffffffffffffffffffffff161415610e3c57610de981611cf5565b838381518110610e22577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052508180610e3890614aa5565b9250505b8080610e4790614aa5565b915050610d9a565b508192505050919050565b600060126000838152602001908152602001600020541415610eb1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea89061468b565b60405180910390fd5b6012600082815260200190815260200160002054421115610f07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efe906145ab565b60405180910390fd5b610f1081612345565b610f4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f46906145eb565b60405180910390fd5b610f58816113fd565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fbc9061470b565b60405180910390fd5b6011543414610fd357600080fd5b6000601260008381526020019081526020016000208190555042817ff636f96ebae0f362bc673d465a964fbbadbe24117ddf2e6e8083b1e51fabe5ff60405160405180910390a350565b61102e61102861233d565b82612430565b61106d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110649061466b565b60405180910390fd5b61107883838361250e565b505050565b60006110d082600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061272590919063ffffffff16565b905092915050565b606060006040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000008152509050600061113e8460405160200161112a9190614323565b60405160208183030381529060405261273f565b9050818160405160200161115392919061433a565b60405160208183030381529060405292505050919050565b61117361233d565b73ffffffffffffffffffffffffffffffffffffffff16611191611714565b73ffffffffffffffffffffffffffffffffffffffff16146111e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111de906145cb565b60405180910390fd5b60006111f1611714565b90508073ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015611239573d6000803e3d6000fd5b5050565b61125883838360405180602001604052806000815250611b0b565b505050565b600d5481565b60008061127a8360026128ea90919063ffffffff16565b50905080915050919050565b61128e61233d565b73ffffffffffffffffffffffffffffffffffffffff166112ac611714565b73ffffffffffffffffffffffffffffffffffffffff1614611302576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f9906145cb565b60405180910390fd5b8060118190555050565b60606000600e5467ffffffffffffffff811115611352577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561138557816020015b60608152602001906001900390816113705790505b50905060005b600e548110156113f55761139e81611cf5565b8282815181106113d7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525080806113ed90614aa5565b91505061138b565b508091505090565b600061142d82604051806060016040528060298152602001614c186029913960026129169092919063ffffffff16565b9050919050565b6060600a805461144390614a73565b80601f016020809104026020016040519081016040528092919081815260200182805461146f90614a73565b80156114bc5780601f10611491576101008083540402835291602001916114bc565b820191906000526020600020905b81548152906001019060200180831161149f57829003601f168201915b5050505050905090565b6000600e54905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611541576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115389061462b565b60405180910390fd5b611588600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612935565b9050919050565b61159761233d565b73ffffffffffffffffffffffffffffffffffffffff166115b5611714565b73ffffffffffffffffffffffffffffffffffffffff161461160b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611602906145cb565b60405180910390fd5b611615600061294a565b565b60606000600e5467ffffffffffffffff81111561165d577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561168b5781602001602082028036833780820191505090505b50905060005b600e548110156116f457808282815181106116d5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080806116ec90614aa5565b915050611691565b508091505090565b60126020528060005260406000206000915090505481565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606008805461174d90614a73565b80601f016020809104026020016040519081016040528092919081815260200182805461177990614a73565b80156117c65780601f1061179b576101008083540402835291602001916117c6565b820191906000526020600020905b8154815290600101906020018083116117a957829003601f168201915b5050505050905090565b6117d861233d565b73ffffffffffffffffffffffffffffffffffffffff166117f6611714565b73ffffffffffffffffffffffffffffffffffffffff161461184c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611843906145cb565b60405180910390fd5b80600f908051906020019061186292919061340b565b5050565b61186e61233d565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156118dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118d3906146ab565b60405180910390fd5b80600660006118e961233d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff1661199661233d565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516119db919061446e565b60405180910390a35050565b6119ef61233d565b73ffffffffffffffffffffffffffffffffffffffff16611a0d611714565b73ffffffffffffffffffffffffffffffffffffffff1614611a63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5a906145cb565b60405180910390fd5b6000611a6e826110d8565b9050611a7981610ad0565b5050565b600f8054611a8a90614a73565b80601f0160208091040260200160405190810160405280929190818152602001828054611ab690614a73565b8015611b035780601f10611ad857610100808354040283529160200191611b03565b820191906000526020600020905b815481529060010190602001808311611ae657829003601f168201915b505050505081565b611b1c611b1661233d565b83612430565b611b5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b529061466b565b60405180910390fd5b611b6784848484612a10565b50505050565b611b7561233d565b73ffffffffffffffffffffffffffffffffffffffff16611b93611714565b73ffffffffffffffffffffffffffffffffffffffff1614611be9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611be0906145cb565b60405180910390fd5b611bf281612345565b611c31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c28906145eb565b60405180910390fd5b600c5442611c3f91906148a8565b601260008381526020019081526020016000208190555050565b611c6161233d565b73ffffffffffffffffffffffffffffffffffffffff16611c7f611714565b73ffffffffffffffffffffffffffffffffffffffff1614611cd5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ccc906145cb565b60405180910390fd5b6000611ce0826110d8565b9050611ceb816117d0565b5050565b600c5481565b6060611d0082612345565b611d3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d36906145eb565b60405180910390fd5b6000600f8054611d4e90614a73565b80601f0160208091040260200160405190810160405280929190818152602001828054611d7a90614a73565b8015611dc75780601f10611d9c57610100808354040283529160200191611dc7565b820191906000526020600020905b815481529060010190602001808311611daa57829003601f168201915b5050505050905060126000848152602001908152602001600020544210611e765760108054611df590614a73565b80601f0160208091040260200160405190810160405280929190818152602001828054611e2190614a73565b8015611e6e5780601f10611e4357610100808354040283529160200191611e6e565b820191906000526020600020905b815481529060010190602001808311611e5157829003601f168201915b505050505090505b611e9e81604051602001611e8a919061435e565b60405160208183030381529060405261273f565b604051602001611eae91906143a1565b604051602081830303815290604052915050919050565b60606000611ed2836114d0565b67ffffffffffffffff811115611f11577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611f3f5781602001602082028036833780820191505090505b5090506000805b600e54811015611ff4578473ffffffffffffffffffffffffffffffffffffffff16611f70826113fd565b73ffffffffffffffffffffffffffffffffffffffff161415611fe15780838381518110611fc6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508180611fdd90614aa5565b9250505b8080611fec90614aa5565b915050611f46565b508192505050919050565b600e5481565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600c54426120a791906148a8565b60126000600e5481526020019081526020016000208190555060126000600e54815260200190815260200160002054600d81905550600d54600e547f6e147ee04eee68681ef8b3fa0e84f5fcf026a98017bebc6cdf9190d174330c6b60405160405180910390a361211a33600e54612a6c565b6001600e5461212991906148a8565b600e81905550565b61213961233d565b73ffffffffffffffffffffffffffffffffffffffff16612157611714565b73ffffffffffffffffffffffffffffffffffffffff16146121ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121a4906145cb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561221d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612214906144ab565b60405180910390fd5b6122268161294a565b50565b61223161233d565b73ffffffffffffffffffffffffffffffffffffffff1661224f611714565b73ffffffffffffffffffffffffffffffffffffffff16146122a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161229c906145cb565b60405180910390fd5b6122ae81612345565b6122ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122e4906145eb565b60405180910390fd5b6000601260008381526020019081526020016000208190555042817ff636f96ebae0f362bc673d465a964fbbadbe24117ddf2e6e8083b1e51fabe5ff60405160405180910390a350565b60115481565b600033905090565b600061235b826002612a8a90919063ffffffff16565b9050919050565b816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166123d5836113fd565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061242982600001612aa4565b9050919050565b600061243b82612345565b61247a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612471906144cb565b60405180910390fd5b6000612485836113fd565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806124f457508373ffffffffffffffffffffffffffffffffffffffff166124dc84610b66565b73ffffffffffffffffffffffffffffffffffffffff16145b8061250557506125048185612005565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661252e826113fd565b73ffffffffffffffffffffffffffffffffffffffff1614612584576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161257b906144eb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156125f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125eb9061458b565b60405180910390fd5b6125ff838383612ab9565b61260a600082612362565b61265b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612abe90919063ffffffff16565b506126ad81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612ad890919063ffffffff16565b506126c481836002612af29092919063ffffffff16565b50808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b60006127348360000183612b27565b60001c905092915050565b6060600082511415612762576040518060200160405280600081525090506128e5565b6000604051806060016040528060408152602001614c73604091399050600060036002855161279191906148a8565b61279b91906148fe565b60046127a7919061492f565b905060006020826127b891906148a8565b67ffffffffffffffff8111156127f7577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156128295781602001600182028036833780820191505090505b509050818152600183018586518101602084015b818310156128a4576003830192508251603f8160121c1685015160f81b8252600182019150603f81600c1c1685015160f81b8252600182019150603f8160061c1685015160f81b8252600182019150603f811685015160f81b82526001820191505061283d565b6003895106600181146128be57600281146128ce576128d9565b613d3d60f01b60028303526128d9565b603d60f81b60018303525b50505050508093505050505b919050565b6000806000806128fd8660000186612b78565b915091508160001c8160001c9350935050509250929050565b6000612929846000018460001b84612bb8565b60001c90509392505050565b600061294382600001612c39565b9050919050565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612a1b84848461250e565b612a2784848484612c4a565b612a66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a5d9061452b565b60405180910390fd5b50505050565b612a86828260405180602001604052806000815250612dae565b5050565b6000612a9c836000018360001b612e09565b905092915050565b6000612ab282600001612e29565b9050919050565b505050565b6000612ad0836000018360001b612e3e565b905092915050565b6000612aea836000018360001b612fc4565b905092915050565b6000612b1e846000018460001b8473ffffffffffffffffffffffffffffffffffffffff1660001b613034565b90509392505050565b6000826000018281548110612b65577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905092915050565b6000806000612b93848660000161306f90919063ffffffff16565b9050808560020160008381526020019081526020016000205492509250509250929050565b6000808460020160008581526020019081526020016000205490506000801b81141580612beb5750612bea8585612e09565b5b8390612c2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c249190614489565b60405180910390fd5b50809150509392505050565b600081600001805490509050919050565b6000612c6b8473ffffffffffffffffffffffffffffffffffffffff16613086565b612c785760019050612da6565b6000612d3f63df20cc6d60e01b612c8d61233d565b888787604051602401612ca394939291906143de565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051806060016040528060328152602001614c41603291398773ffffffffffffffffffffffffffffffffffffffff166130999092919063ffffffff16565b9050600081806020019051810190612d5791906137b7565b905063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614925050505b949350505050565b612db883836130b1565b612dc56000848484612c4a565b612e04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dfb9061452b565b60405180910390fd5b505050565b6000612e21828460000161323f90919063ffffffff16565b905092915050565b6000612e3782600001612c39565b9050919050565b60008083600101600084815260200190815260200160002054905060008114612fb8576000600182612e709190614989565b9050600060018660000180549050612e889190614989565b9050818114612f43576000866000018281548110612ecf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080876000018481548110612f19577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480612f7d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612fbe565b60009150505b92915050565b6000612fd08383613256565b61302957826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905061302e565b600090505b92915050565b60008184600201600085815260200190815260200160002081905550613066838560000161327990919063ffffffff16565b90509392505050565b600061307e8360000183612b27565b905092915050565b600080823b905060008111915050919050565b60606130a88484600085613290565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613121576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613118906146eb565b60405180910390fd5b61312a81612345565b1561316a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613161906146cb565b60405180910390fd5b61317660008383612ab9565b6131c781600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612ad890919063ffffffff16565b506131de81836002612af29092919063ffffffff16565b50808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600061324e8360000183613256565b905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b60006132888360000183612fc4565b905092915050565b6060824710156132d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132cc9061454b565b60405180910390fd5b6132de85613086565b61331d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133149061464b565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051613346919061430c565b60006040518083038185875af1925050503d8060008114613383576040519150601f19603f3d011682016040523d82523d6000602084013e613388565b606091505b50915091506133988282866133a4565b92505050949350505050565b606083156133b457829050613404565b6000835111156133c75782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133fb9190614489565b60405180910390fd5b9392505050565b82805461341790614a73565b90600052602060002090601f0160209004810192826134395760008555613480565b82601f1061345257805160ff1916838001178555613480565b82800160010185558215613480579182015b8281111561347f578251825591602001919060010190613464565b5b50905061348d9190613491565b5090565b5b808211156134aa576000816000905550600101613492565b5090565b60006134c16134bc84614777565b614746565b9050828152602081018484840111156134d957600080fd5b6134e4848285614a31565b509392505050565b60006134ff6134fa846147a7565b614746565b90508281526020810184848401111561351757600080fd5b613522848285614a31565b509392505050565b60008135905061353981614bbb565b92915050565b60008135905061354e81614bd2565b92915050565b60008135905061356381614be9565b92915050565b60008151905061357881614be9565b92915050565b600082601f83011261358f57600080fd5b813561359f8482602086016134ae565b91505092915050565b600082601f8301126135b957600080fd5b81356135c98482602086016134ec565b91505092915050565b6000813590506135e181614c00565b92915050565b6000602082840312156135f957600080fd5b60006136078482850161352a565b91505092915050565b6000806040838503121561362357600080fd5b60006136318582860161352a565b92505060206136428582860161352a565b9150509250929050565b60008060006060848603121561366157600080fd5b600061366f8682870161352a565b93505060206136808682870161352a565b9250506040613691868287016135d2565b9150509250925092565b600080600080608085870312156136b157600080fd5b60006136bf8782880161352a565b94505060206136d08782880161352a565b93505060406136e1878288016135d2565b925050606085013567ffffffffffffffff8111156136fe57600080fd5b61370a8782880161357e565b91505092959194509250565b6000806040838503121561372957600080fd5b60006137378582860161352a565b92505060206137488582860161353f565b9150509250929050565b6000806040838503121561376557600080fd5b60006137738582860161352a565b9250506020613784858286016135d2565b9150509250929050565b6000602082840312156137a057600080fd5b60006137ae84828501613554565b91505092915050565b6000602082840312156137c957600080fd5b60006137d784828501613569565b91505092915050565b6000602082840312156137f257600080fd5b600082013567ffffffffffffffff81111561380c57600080fd5b613818848285016135a8565b91505092915050565b60006020828403121561383357600080fd5b6000613841848285016135d2565b91505092915050565b600061385683836139d1565b905092915050565b600061386a83836142ee565b60208301905092915050565b61387f816149bd565b82525050565b6000613890826147f7565b61389a818561483d565b9350836020820285016138ac856147d7565b8060005b858110156138e857848403895281516138c9858261384a565b94506138d483614823565b925060208a019950506001810190506138b0565b50829750879550505050505092915050565b600061390582614802565b61390f818561484e565b935061391a836147e7565b8060005b8381101561394b578151613932888261385e565b975061393d83614830565b92505060018101905061391e565b5085935050505092915050565b613961816149cf565b82525050565b60006139728261480d565b61397c818561485f565b935061398c818560208601614a40565b61399581614baa565b840191505092915050565b60006139ab8261480d565b6139b58185614870565b93506139c5818560208601614a40565b80840191505092915050565b60006139dc82614818565b6139e6818561487b565b93506139f6818560208601614a40565b6139ff81614baa565b840191505092915050565b6000613a1582614818565b613a1f818561488c565b9350613a2f818560208601614a40565b613a3881614baa565b840191505092915050565b6000613a4e82614818565b613a58818561489d565b9350613a68818560208601614a40565b80840191505092915050565b6000613a8160098361489d565b91507f7b226e616d65223a2200000000000000000000000000000000000000000000006000830152600982019050919050565b6000613ac160268361488c565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613b27602c8361488c565b91507f544e543732313a206f70657261746f7220717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b6000613b8d60298361488c565b91507f544e543732313a207472616e73666572206f6620746f6b656e2074686174206960008301527f73206e6f74206f776e00000000000000000000000000000000000000000000006020830152604082019050919050565b6000613bf360218361488c565b91507f544e543732313a20617070726f76616c20746f2063757272656e74206f776e6560008301527f72000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613c5960328361488c565b91507f544e543732313a207472616e7366657220746f206e6f6e20544e54373231526560008301527f63656976657220696d706c656d656e74657200000000000000000000000000006020830152604082019050919050565b6000613cbf60268361488c565b91507f416464726573733a20696e73756666696369656e742062616c616e636520666f60008301527f722063616c6c00000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613d2560388361488c565b91507f544e543732313a20617070726f76652063616c6c6572206973206e6f74206f7760008301527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006020830152604082019050919050565b6000613d8b60248361488c565b91507f544e543732313a207472616e7366657220746f20746865207a65726f2061646460008301527f72657373000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613df160268361488c565b91507f596f7572206567672068617320616c7265616479206e61747572616c6c79206860008301527f61746368656400000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613e5760478361489d565b91507f222c20226465736372697074696f6e223a22416e204e4654207468617420746860008301527f61742068617463686573222c202261747472696275746573223a22222c20226960208301527f6d616765223a22000000000000000000000000000000000000000000000000006040830152604782019050919050565b6000613ee360028361489d565b91507f227d0000000000000000000000000000000000000000000000000000000000006000830152600282019050919050565b6000613f2360108361489d565b91507f48616368696e672065676773204e4654000000000000000000000000000000006000830152601082019050919050565b6000613f6360208361488c565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000613fa3602f8361488c565b91507f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008301527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006020830152604082019050919050565b6000614009602c8361488c565b91507f544e543732313a20617070726f76656420717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b600061406f601d8361489d565b91507f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000006000830152601d82019050919050565b60006140af602a8361488c565b91507f544e543732313a2062616c616e636520717565727920666f7220746865207a6560008301527f726f2061646472657373000000000000000000000000000000000000000000006020830152604082019050919050565b6000614115601d8361488c565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b600061415560318361488c565b91507f544e543732313a207472616e736665722063616c6c6572206973206e6f74206f60008301527f776e6572206e6f7220617070726f7665640000000000000000000000000000006020830152604082019050919050565b60006141bb601c8361488c565b91507f596f7520616c7265616479206861746368656420796f757220656767000000006000830152602082019050919050565b60006141fb60198361488c565b91507f544e543732313a20617070726f766520746f2063616c6c6572000000000000006000830152602082019050919050565b600061423b601c8361488c565b91507f544e543732313a20746f6b656e20616c7265616479206d696e746564000000006000830152602082019050919050565b600061427b60208361488c565b91507f544e543732313a206d696e7420746f20746865207a65726f20616464726573736000830152602082019050919050565b60006142bb601d8361488c565b91507f4f776e657220646f6573206e6f74206f776e207468697320746f6b656e0000006000830152602082019050919050565b6142f781614a27565b82525050565b61430681614a27565b82525050565b600061431882846139a0565b915081905092915050565b600061432f8284613a43565b915081905092915050565b60006143468285613a43565b91506143528284613a43565b91508190509392505050565b600061436982613a74565b915061437482613f16565b915061437f82613e4a565b915061438b8284613a43565b915061439682613ed6565b915081905092915050565b60006143ac82614062565b91506143b88284613a43565b915081905092915050565b60006020820190506143d86000830184613876565b92915050565b60006080820190506143f36000830187613876565b6144006020830186613876565b61440d60408301856142fd565b818103606083015261441f8184613967565b905095945050505050565b600060208201905081810360008301526144448184613885565b905092915050565b6000602082019050818103600083015261446681846138fa565b905092915050565b60006020820190506144836000830184613958565b92915050565b600060208201905081810360008301526144a38184613a0a565b905092915050565b600060208201905081810360008301526144c481613ab4565b9050919050565b600060208201905081810360008301526144e481613b1a565b9050919050565b6000602082019050818103600083015261450481613b80565b9050919050565b6000602082019050818103600083015261452481613be6565b9050919050565b6000602082019050818103600083015261454481613c4c565b9050919050565b6000602082019050818103600083015261456481613cb2565b9050919050565b6000602082019050818103600083015261458481613d18565b9050919050565b600060208201905081810360008301526145a481613d7e565b9050919050565b600060208201905081810360008301526145c481613de4565b9050919050565b600060208201905081810360008301526145e481613f56565b9050919050565b6000602082019050818103600083015261460481613f96565b9050919050565b6000602082019050818103600083015261462481613ffc565b9050919050565b60006020820190508181036000830152614644816140a2565b9050919050565b6000602082019050818103600083015261466481614108565b9050919050565b6000602082019050818103600083015261468481614148565b9050919050565b600060208201905081810360008301526146a4816141ae565b9050919050565b600060208201905081810360008301526146c4816141ee565b9050919050565b600060208201905081810360008301526146e48161422e565b9050919050565b600060208201905081810360008301526147048161426e565b9050919050565b60006020820190508181036000830152614724816142ae565b9050919050565b600060208201905061474060008301846142fd565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561476d5761476c614b7b565b5b8060405250919050565b600067ffffffffffffffff82111561479257614791614b7b565b5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156147c2576147c1614b7b565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006148b382614a27565b91506148be83614a27565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156148f3576148f2614aee565b5b828201905092915050565b600061490982614a27565b915061491483614a27565b92508261492457614923614b1d565b5b828204905092915050565b600061493a82614a27565b915061494583614a27565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561497e5761497d614aee565b5b828202905092915050565b600061499482614a27565b915061499f83614a27565b9250828210156149b2576149b1614aee565b5b828203905092915050565b60006149c882614a07565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015614a5e578082015181840152602081019050614a43565b83811115614a6d576000848401525b50505050565b60006002820490506001821680614a8b57607f821691505b60208210811415614a9f57614a9e614b4c565b5b50919050565b6000614ab082614a27565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614ae357614ae2614aee565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b614bc4816149bd565b8114614bcf57600080fd5b50565b614bdb816149cf565b8114614be657600080fd5b50565b614bf2816149db565b8114614bfd57600080fd5b50565b614c0981614a27565b8114614c1457600080fd5b5056fe544e543732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e544e543732313a207472616e7366657220746f206e6f6e20544e54373231526563656976657220696d706c656d656e7465724142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220b66e98112fcf87147a340e7a7628f789eac71d790a74f7c2599d5d178455ee3b64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2070,
        "contract": "contracts/TeggNFTTheta.sol:TeggNFTTheta",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 2146,
        "contract": "contracts/TeggNFTTheta.sol:TeggNFTTheta",
        "label": "_holderTokens",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(UintSet)1089_storage)"
      },
      {
        "astId": 2149,
        "contract": "contracts/TeggNFTTheta.sol:TeggNFTTheta",
        "label": "_tokenOwners",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(UintToAddressMap)1461_storage"
      },
      {
        "astId": 2153,
        "contract": "contracts/TeggNFTTheta.sol:TeggNFTTheta",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2159,
        "contract": "contracts/TeggNFTTheta.sol:TeggNFTTheta",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2161,
        "contract": "contracts/TeggNFTTheta.sol:TeggNFTTheta",
        "label": "_name",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 2163,
        "contract": "contracts/TeggNFTTheta.sol:TeggNFTTheta",
        "label": "_symbol",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 2167,
        "contract": "contracts/TeggNFTTheta.sol:TeggNFTTheta",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2169,
        "contract": "contracts/TeggNFTTheta.sol:TeggNFTTheta",
        "label": "_baseURI",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 3007,
        "contract": "contracts/TeggNFTTheta.sol:TeggNFTTheta",
        "label": "_owner",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 3161,
        "contract": "contracts/TeggNFTTheta.sol:TeggNFTTheta",
        "label": "hatchTime",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 3163,
        "contract": "contracts/TeggNFTTheta.sol:TeggNFTTheta",
        "label": "HatchTime",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 3165,
        "contract": "contracts/TeggNFTTheta.sol:TeggNFTTheta",
        "label": "tokenCounter",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 3167,
        "contract": "contracts/TeggNFTTheta.sol:TeggNFTTheta",
        "label": "eggImageURI",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      },
      {
        "astId": 3169,
        "contract": "contracts/TeggNFTTheta.sol:TeggNFTTheta",
        "label": "hatchImageURI",
        "offset": 0,
        "slot": "16",
        "type": "t_string_storage"
      },
      {
        "astId": 3172,
        "contract": "contracts/TeggNFTTheta.sol:TeggNFTTheta",
        "label": "hatchFee",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 3176,
        "contract": "contracts/TeggNFTTheta.sol:TeggNFTTheta",
        "label": "tokenIdToHatchTimer",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(UintSet)1089_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)1089_storage"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bytes32Set)825_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 824,
            "contract": "contracts/TeggNFTTheta.sol:TeggNFTTheta",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)631_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Map)1231_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Map",
        "members": [
          {
            "astId": 1226,
            "contract": "contracts/TeggNFTTheta.sol:TeggNFTTheta",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32Set)825_storage"
          },
          {
            "astId": 1230,
            "contract": "contracts/TeggNFTTheta.sol:TeggNFTTheta",
            "label": "_values",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)631_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 626,
            "contract": "contracts/TeggNFTTheta.sol:TeggNFTTheta",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 630,
            "contract": "contracts/TeggNFTTheta.sol:TeggNFTTheta",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)1089_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 1088,
            "contract": "contracts/TeggNFTTheta.sol:TeggNFTTheta",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)631_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintToAddressMap)1461_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.UintToAddressMap",
        "members": [
          {
            "astId": 1460,
            "contract": "contracts/TeggNFTTheta.sol:TeggNFTTheta",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Map)1231_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}